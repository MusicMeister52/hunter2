image: registry.gitlab.com/rconan/docker-and-compose:1.24.0-0

variables:
  DOCKER_DRIVER: overlay2

services:
  - docker:18.09.5-dind

stages:
  - check
  - build-app
  - test # Also web build and documentation but the gitlab templates need the stage to be called test
  - release

before_script:
  - export GIT_DESCRIBE=$(git describe)
  - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"
  - chmod -R g-w,o-w .
  - ln -s docker-compose.test.yml docker-compose.yml

check:flake8:
  stage: check
  script:
    - docker-compose -f docker-compose.check.yml run --rm flake8 --verbose

check:eslint:
  stage: check
  script:
    - docker-compose -f docker-compose.check.yml run --rm eslint

image:app:
  stage: build-app
  variables:
    SERVICE: app
  script:
    - export IMAGE_TAG="${CI_REGISTRY_IMAGE}/${SERVICE}:${GIT_DESCRIBE}"
    - docker-compose build --build-arg BUILD_TAG="${GIT_DESCRIBE}" "${SERVICE}"
    - docker save -o "${SERVICE}.tar" "${IMAGE_TAG}"
  artifacts:
    expire_in: 90 days
    name: app-container
    paths:
      - "${SERVICE}.tar"

image:metrics:
  stage: build-app
  variables:
    SERVICE: metrics
  script:
    - export IMAGE_TAG="${CI_REGISTRY_IMAGE}/${SERVICE}:${GIT_DESCRIBE}"
    - docker-compose build --build-arg BUILD_TAG="${GIT_DESCRIBE}" "${SERVICE}"
    - docker save -o "${SERVICE}.tar" "${IMAGE_TAG}"
  artifacts:
    expire_in: 90 days
    name: metrics-container
    paths:
      - "${SERVICE}.tar"

image:web:
  stage: test
  dependencies:
    - image:app
  variables:
    SERVICE: web
  script:
    - export IMAGE_TAG="${CI_REGISTRY_IMAGE}/${SERVICE}:${GIT_DESCRIBE}"
    - docker load -i app.tar
    - docker-compose build --build-arg BUILD_TAG="${GIT_DESCRIBE}" "${SERVICE}"
    - docker save -o "${SERVICE}.tar" "${IMAGE_TAG}"
  artifacts:
    expire_in: 90 days
    name: web-container
    paths:
      - "${SERVICE}.tar"

doc:graph:
  stage: test
  dependencies:
    - image:app
  script:
    - docker load -i app.tar
    - install -d -m 777 diagram
    - docker run --rm --entrypoint "sh" -v "${PWD}/diagram:/diagram" "${CI_REGISTRY_IMAGE}/app:${GIT_DESCRIBE}" -c "python manage.py graph_models -a > /diagram/models.dot"
    - docker-compose -f docker-compose.check.yml run --rm dot
  artifacts:
    expire_in: 90 days
    name: models-graph
    paths:
      - diagram/models.*

test:app:
  stage: test
  dependencies:
    - image:app
  variables:
    SERVICE: app
  script:
    - export IMAGE_TAG="${CI_REGISTRY_IMAGE}/${SERVICE}:${GIT_DESCRIBE}"
    - docker load -i "${SERVICE}.tar"
    - install -d -m 777 coverage
    - docker-compose run -e H2_TEST_SEED=1 -v "${PWD}/coverage:/usr/src/app/coverage" --entrypoint "python" "${SERVICE}" -Wd -m coverage run --source . manage.py test -v 2
    - docker run -v "${PWD}/coverage:/usr/src/app/coverage" --entrypoint "python" "${IMAGE_TAG}" -m coverage html
    - docker run -v "${PWD}/coverage:/usr/src/app/coverage" --entrypoint "python" "${IMAGE_TAG}" -m coverage report
  artifacts:
    expire_in: 180 days
    name: coverage
    paths:
      - coverage/
  coverage: /\d+\%\s*$/

include:
  - template: Container-Scanning.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml

release:app:
  stage: release
  dependencies:
    - image:app
  variables:
    SERVICE: app
  script:
    - export IMAGE_TAG="${CI_REGISTRY_IMAGE}/${SERVICE}:${GIT_DESCRIBE}"
    - docker load -i "${SERVICE}.tar"
    - docker-compose push "${SERVICE}"
    - docker tag "${IMAGE_TAG}" "${CI_REGISTRY_IMAGE}/${SERVICE}"
    - docker push "${CI_REGISTRY_IMAGE}/${SERVICE}"
  only:
    - master

release:metrics:
  stage: release
  dependencies:
    - image:metrics
  variables:
    SERVICE: metrics
  script:
    - export IMAGE_TAG="${CI_REGISTRY_IMAGE}/${SERVICE}:${GIT_DESCRIBE}"
    - docker load -i "${SERVICE}.tar"
    - docker-compose push "${SERVICE}"
    - docker tag "${IMAGE_TAG}" "${CI_REGISTRY_IMAGE}/${SERVICE}"
    - docker push "${CI_REGISTRY_IMAGE}/${SERVICE}"
  only:
    - master

release:web:
  stage: release
  dependencies:
    - image:web
  variables:
    SERVICE: web
  script:
    - export IMAGE_TAG="${CI_REGISTRY_IMAGE}/${SERVICE}:${GIT_DESCRIBE}"
    - docker load -i "${SERVICE}.tar"
    - docker-compose push "${SERVICE}"
    - docker tag "${IMAGE_TAG}" "${CI_REGISTRY_IMAGE}/${SERVICE}"
    - docker push "${CI_REGISTRY_IMAGE}/${SERVICE}"
  only:
    - master
