image: registry.gitlab.com/rconan/docker-and-compose:1.29.2-10@sha256:483d9d992eec4f833ab0b595536cbccb575d3d5fcd88d464978d17982b7c188d

variables:
  DOCKER_BUILDKIT: 1
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_TLS_CERTDIR: ""

services:
  - name: docker:20.10.9-dind@sha256:d20f0866ee1aca6b0eb7bc8bdb0d0c938721c7f79219b1d3bc1aa58666928586
    command: ["--mtu=1460"]  # Workaround for https://gitlab.com/gitlab-com/gl-infra/production/-/issues/5590#note_688032420
    alias: docker

stages:
  - build1
  - build2
  - test
  - report
  - release

.base_job:
  before_script:
    - export GIT_DESCRIBE=$([[ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]] && echo "${CI_COMMIT_REF_SLUG}_")$(git describe)
    - export APP_IMAGE_TAG="${CI_REGISTRY_IMAGE}/app:${GIT_DESCRIBE}"
    - export APP_LATEST_TAG="${APP_IMAGE_TAG%:*}:latest"
    - export DB_IMAGE_TAG="${CI_REGISTRY_IMAGE}/db:${GIT_DESCRIBE}"
    - export DB_LATEST_TAG="${DB_IMAGE_TAG%:*}:latest"
    - export METRICS_IMAGE_TAG="${CI_REGISTRY_IMAGE}/metrics:${GIT_DESCRIBE}"
    - export METRICS_LATEST_TAG="${METRICS_IMAGE_TAG%:*}:latest"
    - export PYTHON_IMAGE_TAG="${CI_REGISTRY_IMAGE}/python:${GIT_DESCRIBE}"
    - export PYTHON_LATEST_TAG="${PYTHON_IMAGE_TAG%:*}:latest"
    - export WEB_IMAGE_TAG="${CI_REGISTRY_IMAGE}/web:${GIT_DESCRIBE}"
    - export WEB_LATEST_TAG="${WEB_IMAGE_TAG%:*}:latest"
    - chmod -R g-w,o-w .
    - ln -s docker-compose.prod.yml docker-compose.yml
    - ln -s docker-compose.test.yml docker-compose.override.yml
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"

include:
  template: SAST.gitlab-ci.yml

# Gitlab uses the existence of package.json to determine we're a Node.JS app, which we're not
nodejs-scan-sast:
  rules:
    - when: never

check:flake8:
  extends: .base_job
  needs: []
  stage: test
  script:
    - install -d -m 777 reports
    - docker-compose -f docker-compose.tools.yml run --rm flake8 --verbose --output-file reports/flake8.txt
    - docker-compose -f docker-compose.tools.yml run --entrypoint flake8_junit --rm flake8 reports/flake8.txt reports/flake8.xml
  artifacts:
    reports:
      junit: reports/flake8.xml

check:eslint:
  extends: .base_job
  needs: []
  stage: test
  script:
    - install -d -m 777 reports
    - docker-compose -f docker-compose.tools.yml run -e ESLINT_JUNIT_OUTPUT=reports/junit.xml --rm eslint -f /node_modules/eslint-junit/index.js .
  artifacts:
    reports:
      junit: reports/junit.xml

image:app:
  extends: .base_job
  needs: []
  stage: build1
  script:
    - docker pull "${PYTHON_LATEST_TAG}" || true
    - docker pull "${APP_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${PYTHON_LATEST_TAG}" --target python_build -t "${PYTHON_IMAGE_TAG}" -t "${PYTHON_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain -f images/app/Dockerfile .
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${APP_LATEST_TAG}" -t "${APP_IMAGE_TAG}" -t "${APP_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain -f images/app/Dockerfile .
    - docker push "${PYTHON_IMAGE_TAG}"
    - docker push "${APP_IMAGE_TAG}"

image:db:
  extends: .base_job
  stage: build1
  variables:
  script:
    - docker pull "${DB_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${DB_LATEST_TAG}" -t "${DB_IMAGE_TAG}" -t "${DB_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain images/db
    - docker push "${DB_IMAGE_TAG}"

image:metrics:
  extends: .base_job
  needs: []
  stage: build1
  variables:
  script:
    - docker pull "${METRICS_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${METRICS_LATEST_TAG}" -t "${METRICS_IMAGE_TAG}" -t "${METRICS_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain images/metrics
    - docker push "${METRICS_IMAGE_TAG}"

image:web:
  extends: .base_job
  needs: ["image:app"]
  stage: build2
  script:
    - docker pull "${WEB_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${WEB_LATEST_TAG}" -t "${WEB_IMAGE_TAG}" -t "${WEB_LATEST_TAG}" --build-arg IMAGE_TAG="${APP_IMAGE_TAG}" --progress plain images/web
    - docker push "${WEB_IMAGE_TAG}"

doc:graph:
  extends: .base_job
  needs: ["image:app"]
  stage: build2
  script:
    - install -d -m 777 diagram
    - docker-compose pull app
    - docker-compose run --rm --no-deps --entrypoint /bin/sh -v "${PWD}/diagram:/diagram" app -c "/opt/hunter2/venv/bin/python manage.py graph_models -a > /diagram/models.dot"
    - docker-compose -f docker-compose.tools.yml run --rm dot
  artifacts:
    expire_in: 90 days
    name: models-graph
    paths:
      - diagram/models.*

.test:app:
  extends: .base_job
  needs:
    - image:app
    - image:db
  stage: test
  variables:
    SERVICE: app
  script:
    - install -d -m 777 coverage pytest_cache reports
    - echo "POSTGRES_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 99 | head -n 1)" >> .env
    - docker-compose pull app db
    - docker-compose run -e H2_TEST_SEED=1 -v "${PWD}/coverage:/opt/hunter2/src/coverage" -v "${PWD}/reports:/opt/hunter2/src/reports" -v "${PWD}/pytest_cache:/opt/hunter2/src/.pytest_cache" --entrypoint "/opt/hunter2/venv/bin/pytest" --rm -e COVERAGE_FILE="coverage/${SHARD}.data" app --tb=short --cov . --shard-id="${SHARD}" --num-shards=8
  after_script:
    - docker-compose logs db > db.log
    - docker-compose logs redis > redis.log
  artifacts:
    expire_in: 180 days
    name: coverage
    paths:
      - coverage/
      - "*.log"
    reports:
      junit: reports/TEST-*.xml
    when: always

test:app:0:
  extends: .test:app
  variables:
    SHARD: 0

test:app:1:
  extends: .test:app
  variables:
    SHARD: 1

test:app:2:
  extends: .test:app
  variables:
    SHARD: 2

test:app:3:
  extends: .test:app
  variables:
    SHARD: 3

test:app:4:
  extends: .test:app
  variables:
    SHARD: 4

test:app:5:
  extends: .test:app
  variables:
    SHARD: 5

test:app:6:
  extends: .test:app
  variables:
    SHARD: 6

test:app:7:
  extends: .test:app
  variables:
    SHARD: 7

report:coverage:
  extends: .base_job
  stage: report
  dependencies:
    - test:app:0
    - test:app:1
    - test:app:2
    - test:app:3
    - test:app:4
    - test:app:5
    - test:app:6
    - test:app:7
  needs:
    - test:app:0
    - test:app:1
    - test:app:2
    - test:app:3
    - test:app:4
    - test:app:5
    - test:app:6
    - test:app:7
  script:
    - chmod 777 coverage
    - docker-compose pull app
    - docker-compose run --no-deps -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/coverage" --rm app combine coverage/*.data
    - docker-compose run --no-deps -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/coverage" --rm app html
    - docker-compose run --no-deps -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/coverage" --rm app report
  artifacts:
    expire_in: 180 days
    name: coverage
    paths:
      - coverage/
  coverage: /\d+\%\s*$/

.release_job:
  extends: .base_job
  stage: release
  needs:
    - test:app:0
    - test:app:1
    - test:app:2
    - test:app:3
    - test:app:4
    - test:app:5
    - test:app:6
    - test:app:7
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

release:app:
  extends: .release_job
  script:
    - docker pull "${APP_IMAGE_TAG}"
    - docker tag "${APP_IMAGE_TAG}" "${APP_LATEST_TAG}"
    - docker push "${APP_LATEST_TAG}"

release:db:
  extends: .release_job
  script:
    - docker pull "${DB_IMAGE_TAG}"
    - docker tag "${DB_IMAGE_TAG}" "${DB_LATEST_TAG}"
    - docker push "${DB_LATEST_TAG}"

release:metrics:
  extends: .release_job
  script:
    - docker pull "${METRICS_IMAGE_TAG}"
    - docker tag "${METRICS_IMAGE_TAG}" "${METRICS_LATEST_TAG}"
    - docker push "${METRICS_LATEST_TAG}"

release:python:
  extends: .release_job
  script:
    - docker pull "${PYTHON_IMAGE_TAG}"
    - docker tag "${PYTHON_IMAGE_TAG}" "${PYTHON_LATEST_TAG}"
    - docker push "${PYTHON_LATEST_TAG}"

release:web:
  extends: .release_job
  script:
    - docker pull "${WEB_IMAGE_TAG}"
    - docker tag "${WEB_IMAGE_TAG}" "${WEB_LATEST_TAG}"
    - docker push "${WEB_LATEST_TAG}"

pages:
  extends: .base_job
  stage: release
  needs: ["image:app"]
  script:
    - install -d -m 777 docs/_build
    - docker-compose pull app
    - docker-compose -f docker-compose.tools.yml run --rm -u root --entrypoint /opt/hunter2/src/docs/docker-build-docs.sh docs
    - mkdir public
    - cp -r docs/_build/html/* public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
