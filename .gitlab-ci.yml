image: registry.gitlab.com/rconan/docker-and-compose:1.25.3-0@sha256:8b1c5954a86520e4d5c65534935dd08f58e89e1f98b6b9e59ec94cc218dd44da

variables:
  DOCKER_BUILDKIT: 1
  DOCKER_DRIVER: overlay2

services:
  - docker:19.03.15-dind@sha256:12f8a523856d362e02432383135814828a1053e4f81a790bb3cf0b1b3a25f4d6

stages:
  - build1
  - build2
  - test
  - release

.base_job:
  before_script:
    - export GIT_DESCRIBE=$(git describe)
    - export APP_IMAGE_TAG="${CI_REGISTRY_IMAGE}/app:${GIT_DESCRIBE}"
    - export APP_LATEST_TAG="${APP_IMAGE_TAG%:*}:latest"
    - export DB_IMAGE_TAG="${CI_REGISTRY_IMAGE}/db:${GIT_DESCRIBE}"
    - export DB_LATEST_TAG="${DB_IMAGE_TAG%:*}:latest"
    - export METRICS_IMAGE_TAG="${CI_REGISTRY_IMAGE}/metrics:${GIT_DESCRIBE}"
    - export METRICS_LATEST_TAG="${METRICS_IMAGE_TAG%:*}:latest"
    - export PYTHON_IMAGE_TAG="${CI_REGISTRY_IMAGE}/python:${GIT_DESCRIBE}"
    - export PYTHON_LATEST_TAG="${PYTHON_IMAGE_TAG%:*}:latest"
    - export WEB_IMAGE_TAG="${CI_REGISTRY_IMAGE}/web:${GIT_DESCRIBE}"
    - export WEB_LATEST_TAG="${WEB_IMAGE_TAG%:*}:latest"
    - chmod -R g-w,o-w .
    - ln -s docker-compose.test.yml docker-compose.yml

include:
  template: SAST.gitlab-ci.yml

# Gitlab uses the existence of package.json to determine we're a Node.JS app, which we're not
nodejs-scan-sast:
  rules:
    - when: never

check:flake8:
  extends: .base_job
  needs: []
  stage: test
  script:
    - install -d -m 777 reports
    - docker-compose -f docker-compose.tools.yml run --rm flake8 --verbose --output-file reports/flake8.txt
    - docker-compose -f docker-compose.tools.yml run --entrypoint flake8_junit --rm flake8 reports/flake8.txt reports/flake8.xml
  artifacts:
    reports:
      junit: reports/flake8.xml

check:eslint:
  extends: .base_job
  needs: []
  stage: test
  script:
    - install -d -m 777 reports
    - docker-compose -f docker-compose.tools.yml run -e ESLINT_JUNIT_OUTPUT=reports/junit.xml --rm eslint -f /node_modules/eslint-junit/index.js .
  artifacts:
    reports:
      junit: reports/junit.xml

image:app:
  extends: .base_job
  needs: []
  stage: build1
  script:
    - docker pull "${PYTHON_LATEST_TAG}" || true
    - docker pull "${APP_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${PYTHON_LATEST_TAG}" --target python_build -t "${PYTHON_IMAGE_TAG}" -t "${PYTHON_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain .
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${APP_LATEST_TAG}" -t "${APP_IMAGE_TAG}" -t "${APP_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain .
    - docker save -o python.tar "${PYTHON_IMAGE_TAG}"
    - docker save -o app.tar "${APP_IMAGE_TAG}"
  artifacts:
    expire_in: 90 days
    name: app-container
    paths:
      - python.tar
      - app.tar

image:db:
  extends: .base_job
  stage: build1
  variables:
  script:
    - docker pull "${DB_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${DB_LATEST_TAG}" -t "${DB_IMAGE_TAG}" -t "${DB_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain ./postgres
    - docker save -o db.tar "${DB_IMAGE_TAG}"
  artifacts:
    expire_in: 90 days
    name: db-container
    paths:
      - db.tar

image:metrics:
  extends: .base_job
  needs: []
  stage: build1
  variables:
  script:
    - docker pull "${METRICS_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${METRICS_LATEST_TAG}" -t "${METRICS_IMAGE_TAG}" -t "${METRICS_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain ./prometheus
    - docker save -o metrics.tar "${METRICS_IMAGE_TAG}"
  artifacts:
    expire_in: 90 days
    name: metrics-container
    paths:
      - metrics.tar

image:web:
  extends: .base_job
  needs: ["image:app"]
  stage: build2
  dependencies:
    - image:app
  script:
    - docker load -i app.tar
    - docker pull "${WEB_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${WEB_LATEST_TAG}" -t "${WEB_IMAGE_TAG}" -t "${WEB_LATEST_TAG}" --build-arg IMAGE_TAG="${APP_IMAGE_TAG}" --progress plain ./nginx
    - docker save -o web.tar "${WEB_IMAGE_TAG}"
  artifacts:
    expire_in: 90 days
    name: web-container
    paths:
      - web.tar

doc:graph:
  extends: .base_job
  needs: ["image:app"]
  stage: build2
  dependencies:
    - image:app
  script:
    - docker load -i app.tar
    - install -d -m 777 diagram
    - docker run --rm --entrypoint "sh" -v "${PWD}/diagram:/diagram" "${CI_REGISTRY_IMAGE}/app:${GIT_DESCRIBE}" -c "/opt/hunter2/venv/bin/python manage.py graph_models -a > /diagram/models.dot"
    - docker-compose -f docker-compose.tools.yml run --rm dot
  artifacts:
    expire_in: 90 days
    name: models-graph
    paths:
      - diagram/models.*

test:app:
  extends: .base_job
  dependencies:
    - image:app
    - image:db
  needs:
    - image:app
    - image:db
  stage: test
  variables:
    SERVICE: app
  script:
    - export IMAGE_TAG="${CI_REGISTRY_IMAGE}/${SERVICE}:${GIT_DESCRIBE}"
    - docker load -i "app.tar"
    - docker load -i "db.tar"
    - install -d -m 777 coverage reports
    - echo "POSTGRES_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 99 | head -n 1)" >> .env
    - docker-compose run -e H2_TEST_SEED=1 -v "${PWD}/coverage:/opt/hunter2/src/coverage" -v "${PWD}/reports:/opt/hunter2/src/reports" --entrypoint "/opt/hunter2/venv/bin/python" --rm app -Wd -m coverage run --source . manage.py test -v 2
    - docker run -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/python" --rm "${IMAGE_TAG}" -m coverage html
    - docker run -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/python" --rm "${IMAGE_TAG}" -m coverage report
  after_script:
    - docker-compose logs db > db.log
    - docker-compose logs redis > redis.log
  artifacts:
    expire_in: 180 days
    name: coverage
    paths:
      - coverage/
      - "*.log"
    reports:
      junit: reports/TEST-*.xml
    when: always
  coverage: /\d+\%\s*$/

release:app:
  extends: .base_job
  stage: release
  dependencies:
    - image:app
  script:
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"
    - docker load -i app.tar
    - docker tag "${APP_IMAGE_TAG}" "${APP_LATEST_TAG}"
    - docker push "${APP_IMAGE_TAG}"
    - docker push "${APP_LATEST_TAG}"
  only:
    - master

release:db:
  stage: release
  dependencies:
    - image:db
  script:
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"
    - docker load -i db.tar
    - docker tag "${DB_IMAGE_TAG}" "${DB_LATEST_TAG}"
    - docker push "${DB_IMAGE_TAG}"
    - docker push "${DB_LATEST_TAG}"
  only:
    - master

release:metrics:
  extends: .base_job
  stage: release
  dependencies:
    - image:metrics
  script:
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"
    - docker load -i metrics.tar
    - docker tag "${METRICS_IMAGE_TAG}" "${METRICS_LATEST_TAG}"
    - docker push "${METRICS_IMAGE_TAG}"
    - docker push "${METRICS_LATEST_TAG}"
  only:
    - master

release:python:
  extends: .base_job
  stage: release
  dependencies:
    - image:app
  script:
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"
    - docker load -i python.tar
    - docker tag "${PYTHON_IMAGE_TAG}" "${PYTHON_LATEST_TAG}"
    - docker push "${PYTHON_IMAGE_TAG}"
    - docker push "${PYTHON_LATEST_TAG}"
  only:
    - master

release:web:
  extends: .base_job
  stage: release
  dependencies:
    - image:web
  variables:
  script:
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"
    - docker load -i web.tar
    - docker tag "${WEB_IMAGE_TAG}" "${WEB_LATEST_TAG}"
    - docker push "${WEB_IMAGE_TAG}"
    - docker push "${WEB_LATEST_TAG}"
  only:
    - master
