image: registry.gitlab.com/rconan/docker-and-compose:1.29.2-52@sha256:1bd86902584033f3d1c01b4301ba62071a3bedf263e1169ad782a49c471c62bf

variables:
  DOCKER_BUILDKIT: 1
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_TLS_CERTDIR: ""

services:
  - name: docker:20.10.16-dind@sha256:56ef400f08be1ca817d7e2cfdb43803786ab28d84c8167e8590622d9bab5b415
    command: ["--mtu=1460"]  # Workaround for https://gitlab.com/gitlab-com/gl-infra/production/-/issues/5590#note_688032420
    alias: docker

stages:
  - build1
  - build2
  - test
  - report
  - release

.base_job:
  before_script:
    - export H2_IMAGE_VERSION=$([[ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]] && echo "${CI_COMMIT_REF_SLUG}_")$(git describe)
    - export H2_REGISTRY="${CI_REGISTRY_IMAGE}"
    - chmod -R g-w,o-w .
    - ln -s docker-compose.prod.yml docker-compose.yml
    - ln -s docker-compose.test.yml docker-compose.override.yml
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"

include:
  template: SAST.gitlab-ci.yml

# Gitlab uses the existence of package.json to determine we're a Node.JS app, which we're not
nodejs-scan-sast:
  rules:
    - when: never

check:flake8:
  extends: .base_job
  needs: []
  stage: test
  script:
    - install -d -m 777 reports
    - docker-compose -f docker-compose.tools.yml run --rm flake8 --verbose --format junit-xml --output-file reports/flake8.xml
  artifacts:
    reports:
      junit: reports/flake8.xml

check:eslint:
  extends: .base_job
  needs: []
  stage: test
  script:
    - install -d -m 777 reports
    - docker-compose -f docker-compose.tools.yml run -e ESLINT_JUNIT_OUTPUT=reports/junit.xml --rm eslint -f /node_modules/eslint-junit/index.js .
  artifacts:
    reports:
      junit: reports/junit.xml

.image_job:
  extends: .base_job
  needs: []
  stage: build1
  variables:
    BUILDKIT_VERSION: v0.9.3
  before_script:
    - !reference [.base_job, before_script]
    - docker buildx create --name hunter2 --node amd64 --use
    - >
      if [[ "${CI_COMMIT_REF_PROTECTED}" == "true" ]];
      then
        PLATFORMS="linux/amd64,linux/arm64/v8";
      else
        PLATFORMS="linux/amd64";
      fi
    - >
      if [[ ${PLATFORMS} == *"linux/arm64/v8"* ]];
      then
        printenv ARM64_DOCKER_CERT | base64 -d > cert.pem;
        printenv ARM64_DOCKER_KEY | base64 -d > key.pem;
        docker context create arm64 --docker "host=tcp://arm64.build.hunter2.app:2375/,ca=/etc/ssl/cert.pem,cert=cert.pem,key=key.pem";
        docker buildx create --append --bootstrap --driver-opt "image=moby/buildkit:${BUILDKIT_VERSION}" --name hunter2 --node "arm64${BUILDKIT_VERSION}" --platform linux/arm64/v8 --use arm64;
      fi
  script:
    - REPO="${H2_REGISTRY}/${SERVICE}"
    - CACHE_TAG="${REPO}:cache"
    - docker buildx build --platform "${PLATFORMS}" --cache-to="type=registry,ref=${CACHE_TAG},mode=max" --cache-from="type=registry,ref=${CACHE_TAG}" -t "${REPO}:${H2_IMAGE_VERSION}" --progress plain "images/${SERVICE}" --push

image:app:
  extends: .image_job
  script:
    - PYTHON_REPO="${H2_REGISTRY}/python"
    - PYTHON_CACHE_TAG="${PYTHON_REPO}:cache"
    - docker buildx build --platform "${PLATFORMS}" --cache-to="type=registry,ref=${PYTHON_CACHE_TAG},mode=max" --cache-from="type=registry,ref=${PYTHON_CACHE_TAG}" --target python_build -t "${PYTHON_REPO}:${H2_IMAGE_VERSION}" --progress plain -f images/app/Dockerfile . --push
    - APP_REPO="${H2_REGISTRY}/app"
    - APP_CACHE_TAG="${APP_REPO}:cache"
    - docker buildx build --platform "${PLATFORMS}" --cache-to="type=registry,ref=${APP_CACHE_TAG},mode=max" --cache-from="type=registry,ref=${APP_CACHE_TAG}" -t "${APP_REPO}:${H2_IMAGE_VERSION}" --progress plain -f images/app/Dockerfile . --push

image:db:
  extends: .image_job
  variables:
    SERVICE: db

image:metrics:
  extends: .image_job
  variables:
    SERVICE: metrics

image:postgres_exporter:
  extends: .image_job
  variables:
    SERVICE: postgres_exporter

image:web:
  extends: .image_job
  needs: ["image:app"]
  stage: build2
  script:  # Web needs the build tag as an argument
    - REPO="${H2_REGISTRY}/web"
    - CACHE_TAG="${REPO}:cache"
    - docker buildx build --platform "${PLATFORMS}" --cache-to="type=registry,ref=${CACHE_TAG},mode=max" --cache-from="type=registry,ref=${CACHE_TAG}" -t "${REPO}:${H2_IMAGE_VERSION}" --build-arg H2_REGISTRY --build-arg H2_IMAGE_VERSION --progress plain ./images/web --push

doc:graph:
  extends: .base_job
  needs: ["image:app"]
  stage: build2
  script:
    - install -d -m 777 diagram
    - docker-compose pull app
    - docker-compose run --rm --no-deps --entrypoint /bin/sh -v "${PWD}/diagram:/diagram" app -c "/opt/hunter2/venv/bin/python manage.py graph_models -a > /diagram/models.dot"
    - docker-compose -f docker-compose.tools.yml run --rm dot
  artifacts:
    expire_in: 90 days
    name: models-graph
    paths:
      - diagram/models.*

.test:app:
  extends: .base_job
  needs:
    - image:app
    - image:db
  stage: test
  variables:
    SERVICE: app
  script:
    - install -d -m 777 coverage pytest_cache reports
    - echo "POSTGRES_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 99 | head -n 1)" >> .env
    - docker-compose pull app db
    - docker-compose run -e H2_TEST_SEED=1 -v "${PWD}/coverage:/opt/hunter2/src/coverage" -v "${PWD}/reports:/opt/hunter2/src/reports" -v "${PWD}/pytest_cache:/opt/hunter2/src/.pytest_cache" --entrypoint "/opt/hunter2/venv/bin/pytest" --rm -e COVERAGE_FILE="coverage/${SHARD}.data" app --tb=short --cov . --junit-xml=reports/pytest.xml --shard-id="${SHARD}" --num-shards=8
  after_script:
    - docker-compose logs db > db.log
    - docker-compose logs redis > redis.log
  artifacts:
    expire_in: 180 days
    name: coverage
    paths:
      - coverage/
      - "*.log"
    reports:
      junit: reports/pytest.xml
    when: always
  coverage: /NO_COVERAGE_HACK/  # This regex shouldn't match

test:app:0:
  extends: .test:app
  variables:
    SHARD: 0

test:app:1:
  extends: .test:app
  variables:
    SHARD: 1

test:app:2:
  extends: .test:app
  variables:
    SHARD: 2

test:app:3:
  extends: .test:app
  variables:
    SHARD: 3

test:app:4:
  extends: .test:app
  variables:
    SHARD: 4

test:app:5:
  extends: .test:app
  variables:
    SHARD: 5

test:app:6:
  extends: .test:app
  variables:
    SHARD: 6

test:app:7:
  extends: .test:app
  variables:
    SHARD: 7

report:coverage:
  extends: .base_job
  stage: report
  dependencies:
    - test:app:0
    - test:app:1
    - test:app:2
    - test:app:3
    - test:app:4
    - test:app:5
    - test:app:6
    - test:app:7
  needs:
    - test:app:0
    - test:app:1
    - test:app:2
    - test:app:3
    - test:app:4
    - test:app:5
    - test:app:6
    - test:app:7
  script:
    - chmod 777 coverage
    - docker-compose pull app
    - docker-compose run --no-deps -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/coverage" --rm app combine coverage/*.data
    - docker-compose run --no-deps -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/coverage" --rm app html
    - docker-compose run --no-deps -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/coverage" --rm app report
  artifacts:
    expire_in: 180 days
    name: coverage
    paths:
      - coverage/
  coverage: /\d+\%\s*$/

.release_job:
  extends: .base_job
  stage: release
  needs:
    - test:app:0
    - test:app:1
    - test:app:2
    - test:app:3
    - test:app:4
    - test:app:5
    - test:app:6
    - test:app:7
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - REPO="${H2_REGISTRY}/${SERVICE}"
    - IMAGE_TAG="${REPO}:${H2_IMAGE_VERSION}"
    - LATEST_TAG="${REPO}:latest"
    - docker pull "${IMAGE_TAG}"
    - docker tag "${IMAGE_TAG}" "${LATEST_TAG}"
    - docker push "${LATEST_TAG}"

release:app:
  extends: .release_job
  variables:
    SERVICE: app

release:db:
  extends: .release_job
  variables:
    SERVICE: db

release:metrics:
  extends: .release_job
  variables:
    SERVICE: metrics

release:python:
  extends: .release_job
  variables:
    SERVICE: python

release:postgres_exporter:
  extends: .release_job
  variables:
    SERVICE: postgres_exporter

release:web:
  extends: .release_job
  variables:
    SERVICE: web

pages:
  extends: .base_job
  stage: release
  needs: ["image:app"]
  script:
    - install -d -m 777 docs/_build
    - docker-compose pull app
    - docker-compose -f docker-compose.tools.yml run --rm -u root --entrypoint /opt/hunter2/src/docs/docker-build-docs.sh docs
    - mkdir public
    - cp -r docs/_build/html/* public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
