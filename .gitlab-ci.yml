workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

image: registry.gitlab.com/rconan/docker-and-compose:1.25.3-0@sha256:8b1c5954a86520e4d5c65534935dd08f58e89e1f98b6b9e59ec94cc218dd44da

variables:
  DOCKER_BUILDKIT: 1
  DOCKER_DRIVER: overlay2

services:
  - docker:20.10.8-dind@sha256:1efacb06edbb1e2bd4a39dcc69883866c7dd98562a49fa97d7d29c2da1c3974f

stages:
  - build0
  - build1
  - build2
  - test
  - report
  - release

.base_job:
  before_script:
    - export GIT_DESCRIBE=$([[ "${CI_COMMIT_BRANCH}" != "${CI_DEFAULT_BRANCH}" ]] && echo "${CI_COMMIT_REF_SLUG}_")$(git describe)
    - export APP_IMAGE_TAG="${CI_REGISTRY_IMAGE}/app:${GIT_DESCRIBE}"
    - export APP_LATEST_TAG="${APP_IMAGE_TAG%:*}:latest"
    - export DB_IMAGE_TAG="${CI_REGISTRY_IMAGE}/db:${GIT_DESCRIBE}"
    - export DB_LATEST_TAG="${DB_IMAGE_TAG%:*}:latest"
    - export METRICS_IMAGE_TAG="${CI_REGISTRY_IMAGE}/metrics:${GIT_DESCRIBE}"
    - export METRICS_LATEST_TAG="${METRICS_IMAGE_TAG%:*}:latest"
    - export PYTHON_IMAGE_TAG="${CI_REGISTRY_IMAGE}/python:${GIT_DESCRIBE}"
    - export PYTHON_LATEST_TAG="${PYTHON_IMAGE_TAG%:*}:latest"
    - export WEB_IMAGE_TAG="${CI_REGISTRY_IMAGE}/web:${GIT_DESCRIBE}"
    - export WEB_LATEST_TAG="${WEB_IMAGE_TAG%:*}:latest"
    - chmod -R g-w,o-w .
    - ln -s docker-compose.prod.yml docker-compose.yml
    - ln -s docker-compose.test.yml docker-compose.override.yml
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"

include:
  template: SAST.gitlab-ci.yml

# Gitlab uses the existence of package.json to determine we're a Node.JS app, which we're not
nodejs-scan-sast:
  rules:
    - when: never

check:flake8:
  extends: .base_job
  needs: []
  stage: test
  script:
    - install -d -m 777 reports
    - docker-compose -f docker-compose.tools.yml run --rm flake8 --verbose --output-file reports/flake8.txt
    - docker-compose -f docker-compose.tools.yml run --entrypoint flake8_junit --rm flake8 reports/flake8.txt reports/flake8.xml
  artifacts:
    reports:
      junit: reports/flake8.xml

check:eslint:
  extends: .base_job
  needs: []
  stage: test
  script:
    - install -d -m 777 reports
    - docker-compose -f docker-compose.tools.yml run -e ESLINT_JUNIT_OUTPUT=reports/junit.xml --rm eslint -f /node_modules/eslint-junit/index.js .
  artifacts:
    reports:
      junit: reports/junit.xml

wheels:
  stage: build0
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - poetry.lock
  image:
    name: python:3.8.11-alpine3.14@sha256:b12462dab319994e6a4be09eee3be7a29b6b7abf6202fb8030f45af4d39d7e24
    entrypoint: []
  script:
    - apk add cargo gcc git libffi-dev linux-headers lua5.2-dev musl-dev postgresql-dev rust
    - poetry_version="$(cat poetry.version)"
    - wget "https://raw.githubusercontent.com/python-poetry/poetry/${poetry_version}/get-poetry.py"
    - python get-poetry.py --version "${poetry_version}"
    - /root/.poetry/bin/poetry export --dev -o requirements.txt --without-hashes
    - pip wheel -r requirements.txt -w wheels
    - pip install twine==3.4.1
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --skip-existing --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi wheels/*

image:app:
  extends: .base_job
  needs: [wheels]
  stage: build1
  script:
    - docker pull "${PYTHON_LATEST_TAG}" || true
    - docker pull "${APP_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${PYTHON_LATEST_TAG}" --target python_build -t "${PYTHON_IMAGE_TAG}" -t "${PYTHON_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain .
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${APP_LATEST_TAG}" -t "${APP_IMAGE_TAG}" -t "${APP_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain .
    - docker push "${PYTHON_IMAGE_TAG}"
    - docker push "${APP_IMAGE_TAG}"

image:db:
  extends: .base_job
  stage: build1
  variables:
  script:
    - docker pull "${DB_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${DB_LATEST_TAG}" -t "${DB_IMAGE_TAG}" -t "${DB_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain ./postgres
    - docker push "${DB_IMAGE_TAG}"

image:metrics:
  extends: .base_job
  needs: []
  stage: build1
  variables:
  script:
    - docker pull "${METRICS_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${METRICS_LATEST_TAG}" -t "${METRICS_IMAGE_TAG}" -t "${METRICS_LATEST_TAG}" --build-arg BUILD_TAG="${GIT_DESCRIBE}" --progress plain ./prometheus
    - docker push "${METRICS_IMAGE_TAG}"

image:web:
  extends: .base_job
  needs: ["image:app"]
  stage: build2
  script:
    - docker pull "${WEB_LATEST_TAG}" || true
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from "${WEB_LATEST_TAG}" -t "${WEB_IMAGE_TAG}" -t "${WEB_LATEST_TAG}" --build-arg IMAGE_TAG="${APP_IMAGE_TAG}" --progress plain ./nginx
    - docker push "${WEB_IMAGE_TAG}"

doc:graph:
  extends: .base_job
  needs: ["image:app"]
  stage: build2
  script:
    - install -d -m 777 diagram
    - docker-compose pull app
    - docker-compose run --rm --no-deps --entrypoint /bin/sh -v "${PWD}/diagram:/diagram" app -c "/opt/hunter2/venv/bin/python manage.py graph_models -a > /diagram/models.dot"
    - docker-compose -f docker-compose.tools.yml run --rm dot
  artifacts:
    expire_in: 90 days
    name: models-graph
    paths:
      - diagram/models.*

.test:app:
  extends: .base_job
  needs:
    - image:app
    - image:db
  stage: test
  variables:
    SERVICE: app
  script:
    - install -d -m 777 coverage pytest_cache reports
    - echo "POSTGRES_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 99 | head -n 1)" >> .env
    - docker-compose pull app db
    - docker-compose run -e H2_TEST_SEED=1 -v "${PWD}/coverage:/opt/hunter2/src/coverage" -v "${PWD}/reports:/opt/hunter2/src/reports" -v "${PWD}/pytest_cache:/opt/hunter2/src/.pytest_cache" --entrypoint "/opt/hunter2/venv/bin/pytest" --rm -e COVERAGE_FILE="coverage/${SHARD}.data" app --tb=short --cov . --shard-id="${SHARD}" --num-shards=8
  after_script:
    - docker-compose logs db > db.log
    - docker-compose logs redis > redis.log
  artifacts:
    expire_in: 180 days
    name: coverage
    paths:
      - coverage/
      - "*.log"
    reports:
      junit: reports/TEST-*.xml
    when: always

test:app:0:
  extends: .test:app
  variables:
    SHARD: 0

test:app:1:
  extends: .test:app
  variables:
    SHARD: 1

test:app:2:
  extends: .test:app
  variables:
    SHARD: 2

test:app:3:
  extends: .test:app
  variables:
    SHARD: 3

test:app:4:
  extends: .test:app
  variables:
    SHARD: 4

test:app:5:
  extends: .test:app
  variables:
    SHARD: 5

test:app:6:
  extends: .test:app
  variables:
    SHARD: 6

test:app:7:
  extends: .test:app
  variables:
    SHARD: 7

report:coverage:
  extends: .base_job
  stage: report
  dependencies:
    - test:app:0
    - test:app:1
    - test:app:2
    - test:app:3
    - test:app:4
    - test:app:5
    - test:app:6
    - test:app:7
  needs:
    - test:app:0
    - test:app:1
    - test:app:2
    - test:app:3
    - test:app:4
    - test:app:5
    - test:app:6
    - test:app:7
  script:
    - chmod 777 coverage
    - docker-compose pull app
    - docker-compose run --no-deps -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/coverage" --rm app combine coverage/*.data
    - docker-compose run --no-deps -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/coverage" --rm app html
    - docker-compose run --no-deps -v "${PWD}/coverage:/opt/hunter2/src/coverage" --entrypoint "/opt/hunter2/venv/bin/coverage" --rm app report
  artifacts:
    expire_in: 180 days
    name: coverage
    paths:
      - coverage/
  coverage: /\d+\%\s*$/

.release_job:
  extends: .base_job
  stage: release
  needs:
    - test:app:0
    - test:app:1
    - test:app:2
    - test:app:3
    - test:app:4
    - test:app:5
    - test:app:6
    - test:app:7
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

release:app:
  extends: .release_job
  script:
    - docker pull "${APP_IMAGE_TAG}"
    - docker tag "${APP_IMAGE_TAG}" "${APP_LATEST_TAG}"
    - docker push "${APP_LATEST_TAG}"

release:db:
  extends: .release_job
  script:
    - docker pull "${DB_IMAGE_TAG}"
    - docker tag "${DB_IMAGE_TAG}" "${DB_LATEST_TAG}"
    - docker push "${DB_LATEST_TAG}"

release:metrics:
  extends: .release_job
  script:
    - docker pull "${METRICS_IMAGE_TAG}"
    - docker tag "${METRICS_IMAGE_TAG}" "${METRICS_LATEST_TAG}"
    - docker push "${METRICS_LATEST_TAG}"

release:python:
  extends: .release_job
  script:
    - docker pull "${PYTHON_IMAGE_TAG}"
    - docker tag "${PYTHON_IMAGE_TAG}" "${PYTHON_LATEST_TAG}"
    - docker push "${PYTHON_LATEST_TAG}"

release:web:
  extends: .release_job
  script:
    - docker pull "${WEB_IMAGE_TAG}"
    - docker tag "${WEB_IMAGE_TAG}" "${WEB_LATEST_TAG}"
    - docker push "${WEB_LATEST_TAG}"
